#include "Utils.s3d"

class Serializer
{
	var arrayEscape;
	var objectEscape;
	var class_instance;
	var attributes;
	Serialize(c);
	Deserialize(sstring);
	
	_extractString(s_);
	_mapKeyValue(_s, start, end);
	_mapArray(_s, start, end);
	_isArray(s_);
	_isObject(s_);
};

function Serializer::Serializer()
{
	attributes = array(0);
	arrayEscape = "{%";
	objectEscape = "{$";
}

function Serializer::_extractString(s_)
{	
	var strlen = val(substr(s_, 0, indexOf(s_, ":")));
	var s = substr(s_, indexOf(s_, ":")+1, indexOf(s_, ":")+strlen+1);
	return s;
}

function Serializer::Serialize(c)
{
	var instance, attributes;
	var sstring = "";
	if(valtype(c) == "O")
	{
		var factor = callback(c.__GetName()+"_Factory");
		instance = factor[0];
		attributes = factor[1];
	
		foreach(var a in attributes)
		{
			instance.__SET(a,c.__GET(a));
		}
		sstring = objectEscape + instance.__GetName() + " ";
		for(var i = 0; i < len(attributes); i++)
		{
			var value = instance.__Get(attributes[i]);
			var el = "";
			switch(valtype(value)[0])
			{
				case "O":
					sstring += attributes[i] + ":" + Serialize(value);
					break;
				case "A":
					for(var v = 0; v<len(value); v++)
						el += Serialize(value[v]);

					sstring += attributes[i] + ":" + str(len(el)+1+len(arrayEscape)) + ":" + arrayEscape + el + "}";
					break;
				default:
					sstring += attributes[i] + ":" + str(len(VarStringEncode(value))) + ":" + VarStringEncode(value);
					break;
			}
		} 
		sstring += "}";
	} else {
		sstring += VarStringEncode(c);
	}
	return str(len(sstring)) + ":" + sstring;
}

function Serializer::_mapKeyValue(_s, start, end)
{
	var key = array(0);
	var value = array(0);
	start = (start != Void) ? start : 0;
	end = (end != Void) ? end : len(_s);
	for(var i = start; i<end; i++)
	{	
		var k = substr(_s, i, indexOf(_s, ":", i));
		i = indexOf(_s, ":", i)+1;
		var l = val(substr(_s, i, indexOf(_s, ":", i+1)));
		i = indexOf(_s, ":", i+1)+1; //escape ,
		var v = str(l) + ":" + substr(_s, i, i+l);
		i = i+l-1;
//		trace(k, l, v, i);
		aadd(key, k);
		aadd(value, v);
	}
	return {key, value};
}

function Serializer::_mapArray(_s, start, end) 
{
	var arr = array(0);
	start = (start != Void) ? start : 0;
	end = (end != Void) ? end : len(_s);
	for(var i = start; i<end; i++)
	{
		var l = val(substr(_s, i, indexOf(_s, ":", i)));
		i = indexOf(_s, ":", i+1); //escape ,
		var v = str(l) + ":" + substr(_s, i+1, i+l+1);
		i = i+l;
//		trace(v, i);
		if(v != "0:")
			aadd(arr, v);
	}
	return arr;
}

function Serializer::_isObject(s_)
{
	for(var i = 0; i<len(objectEscape); i++)
	{
		if(s_[i] != objectEscape[i])
			return false;
	}
	return true;
}

function Serializer::_isArray(s_)
{
	for(var i = 0; i<len(arrayEscape); i++)
	{
		if(s_[i] != arrayEscape[i])
			return false;
	}
	return true;
}

function Serializer::Deserialize(s_)
{
	var s = _extractString(s_);
	//var s = s_;
	if(_isObject(s)){
		
		var i = indexOf(s, " ", 2);
		var c = substr(s, 2, i);
//		trace(c);
		var _instance = callback(substr(c, 0, len(c))+"_Factory");
		_instance = _instance[0];
		var instance_string = substr(s, i+1, len(s)-len(c)-3+i); //3 is for ($ and space
//		trace(instance_string);
		var kv = _mapKeyValue(instance_string);
//		trace(kv);
		var key = kv[0];
		var value = kv[1];
		for(var i = 0; i < len(key); i++)
		{
			_instance.__SET(key[i], Deserialize(value[i]));
		}
		return _instance;
	}
	else if(_isArray(s))
	{	
		var instance = array(0);
		var els = _mapArray(s, len(arrayEscape));
//		trace(els);
		foreach(var e in els )
		{
			aadd(instance, Deserialize(e));
		}
		return instance;
	}
	else
	{
//		trace(s);
		return VarStringDecode(s);
	}
}
